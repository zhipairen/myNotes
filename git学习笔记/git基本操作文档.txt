  廖雪峰的官方网站: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
1、初始化git仓库：git init 
   添加文件到git仓库：  git add <file> 
			git commit -m <注释> 提交
   掌握工作区状态：git status ,可以用 git diff 命令查看修改内容

2、版本回退：   HEAD指向的版本是当前版本，版本的历史穿梭，使用命令  git reset --hard commit_id(或 HEAD ^或HEAD~100 ）
		回退时可以用 git log查看提交历史
		重返未来，用 git reflog 查看命令历史，以便确定回到未来的哪个版本

3、工作区和暂存区：每次修改，如果不add到暂存区，那就不会加入到commit中。

4、撤销修改：

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。

git checkout -- file 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容

5、远程仓库：

 创建SSH Key:只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了

6、添加远程库：

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

git clone 远程仓库地址 克隆

7、创建与合并分支：

（创建一个dev指针，指向master相同的提交，再把HEAD指向dev,就表示当前分支在dev上，假如在dev上的工作完成了，就可以把dev合并到master上，就是直接把master指向dev的当前提交，就完成了合并：）

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

解决冲突：当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图

8、分支管理策略：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
 git merge --no-ff -m "merge with no-ff" 分支名  
（--no-ff参数可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。）
9、bug分支：

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop（恢复并删除），回到工作现场。
一是用git stash apply stash编号 恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
git stash list 现场列表
 

10、feature分支(新功能分支）：

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

11、多人协作：
git remote -v 显示远程库的详细信息；
推送分支：git push -u（第一次推送加上，以建立本地分支与远程分支的对应，以后可不加）orgin(远程仓库名） master(本地分支名）

master分支是主分支，因此要时刻与远程同步；

dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

*：查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：git checkout -b dev origin/dev

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，如果git pull 提示“no tracking information”使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

12、标签管理：
tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。

创建标签：在分支上 git tag  v1.0 (commit_id 可省略）

git tag -a v1.0 -m "version 1.0 " (commit_id);// -a指定标签名 或者 通过 -s用私钥签名一个标签
git show <tagname> 查看标签信息

